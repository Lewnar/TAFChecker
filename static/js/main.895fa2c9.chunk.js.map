{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","React","useState","input","setInput","newLine","newBlock","firstLine","otherLines","ending","splitTAF","console","log","splittingLines","split","splittingBlock","blockSplit","push","cleaner","checkingTAF","length","output","line","index","parseInt","tafRow","checkerRow","concat","fLineOutput","map","item","test","array","filter","object","className","rows","cols","onChange","e","target","value","onClick","checkTAF","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OA+FeA,G,MA3FH,SAACC,GAAW,IAAD,EACKC,IAAMC,SAAS,IADpB,mBACdC,EADc,KACPC,EADO,KAEfC,EAAU,KACVC,EAAW,KACXC,EAAY,CAAC,8BAA+B,WAAY,cAAe,8CAA+C,0DAA2D,WAAY,4CAA6C,sBAC1OC,EAAa,CAAC,oBAAqB,gDAAiD,mDAAoD,WAAY,4CAA6C,sBACjMC,EAAS,CAAC,+DAAgE,kEAW1EC,EAAW,SAACP,GAChBQ,QAAQC,IAAI,kDACZ,IAAMC,EAAiBV,EAAMW,MAAMT,GAC7BU,EAAiB,GAHG,uBAI1B,YAAiBF,EAAjB,+CAAgC,CAAC,IACzBG,EADwB,QACNF,MAAMR,GAE9BS,EAAeE,KAAKC,EAAQF,KAPJ,kFAU1B,OADAL,QAAQC,IAAI,4BAA6BG,GAClCA,GAIHI,EAAc,SAACL,GACnBH,QAAQC,IAAI,kDACZD,QAAQC,IAAI,4BAA6BE,EAAMM,QAC/C,IAAIC,EAAS,GAHgB,WAIpBC,GACP,IAAIC,EAAQC,SAASF,GACjBG,EAASX,EAAMS,GACfG,EAAa,GACjBf,QAAQC,IAAI,mCAAoCU,GAChDX,QAAQC,IAAI,4BAA6BE,EAAMM,OAAO,IAAME,GAC/C,IAAVC,GAAeT,EAAMM,OAAO,IAAMG,EACnCG,EAAanB,EAAUoB,OAAOlB,GACZ,IAAVc,GACRG,EAAanB,EACbI,QAAQC,IAAI,yCACJE,EAAMM,OAAO,IAAMG,GAC3BG,EAAalB,EAAWmB,OAAOlB,GAC/BE,QAAQC,IAAI,sCAEZc,EAAalB,EACbG,QAAQC,IAAI,mDAEd,IAAIgB,EAAcH,EAAOI,KAAI,SAACC,EAAMP,GAElC,OADAZ,QAAQC,IAAI,4BAA6Bc,EAAWH,MACjDG,EAAWH,GAAOQ,KAAKD,MAM5BT,EAAOJ,KAAKW,IA1Bd,IAAK,IAAIN,KAAQR,EAAO,EAAfQ,GA4BTX,QAAQC,IAAI,kCAAmCS,IAS3CH,EAAU,SAACc,GACf,OAAOA,EAAMC,QAAO,SAAAC,GAChB,MAAmB,KAAXA,MAKd,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,8BAAUA,UAAU,WAAWC,KAAK,KAAKC,KAAK,MAAMC,SAAU,SAACC,GAfnEnC,EAeuFmC,EAfxEC,OAAOC,UAgBlB,4BAAQC,QAAS,SAACH,IA1EP,SAACA,GAChB5B,QAAQC,IAAI,2CAA4CT,GACxD,IAAMW,EAAQJ,EAASP,GACTgB,EAAYL,GAuEC6B,KAAvB,iBC5EYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.895fa2c9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst App = (props) => {\n  const [input, setInput] = React.useState('');\n  const newLine = /\\n/;\n  const newBlock = /\\s/;\n  const firstLine = [/((TAF)|(TAF) ((AMD)|(COR)))/, /[A-Z]{4}/, /[0-9]{6}[Z]/, /[0-3][0-9][0-2][0-9][/][0-3][0-9][0-2][0-9]/, /([0-3][0-9][0]|(VRB))[0-9][0-9]((KT)|(G)[0-9][0-9](KT))/, /[0-9]{4}/, /((SKC)|([A-Z]{3}[0-9]{3})|((VV)[0-9]{3}))/, /(QNH)[0-9]{4}(INS)/]\n  const otherLines = [/((BECMG)|(TEMPO))/, /([0-3][0-9][0-2][0-9][/][0-3][0-9][0-2][0-9])/, /(([0-9]{3}|(VRB))[0-9]{2}((KT)|(G)[0-9]{2}(KT)))/, /[0-9]{4}/, /((SKC)|([A-Z]{3}[0-9]{3})|((VV)[0-9]{3}))/, /(QNH)[0-9]{4}(INS)/]\n  const ending = [/((((TX)[0-9]{2})|((TXM)[0-9]{2}))[/][0-3][0-9][0-2][0-9](Z))/, /(((((TN)[0-9]{2})|((TNM)[0-9]{2}))[/][0-3][0-9][0-2][0-9](Z)))/]\n\n\n  //onclick of check TAF causes this function to activate\n  const checkTAF = (e) => {\n    console.log('========================> Checking Input', input);\n    const split = splitTAF(input)\n    const check = checkingTAF(split)\n  }\n\n  //function to split pharagraph into parts\n  const splitTAF = (input) => {\n    console.log('========================>Splitting Into Blocks');\n    const splittingLines = input.split(newLine)\n    const splittingBlock = []\n    for (let line of splittingLines){\n      const blockSplit = line.split(newBlock)\n      //fliter Function was added to get rid of empty stings\n      splittingBlock.push(cleaner(blockSplit))\n    }\n    console.log('========================>', splittingBlock);\n    return splittingBlock\n  }\n\n  //function that goes through the array and checks if anything is wrong or not there\n  const checkingTAF = (split) => {\n    console.log('========================>Checking TAF Function');\n    console.log('========================>', split.length);\n    let output = []\n    for (let line in split){\n      let index = parseInt(line)\n      let tafRow = split[index]\n      let checkerRow = []\n      console.log('========================>', typeof line);\n      console.log('========================>', split.length-1 === line);\n      if(index === 0 && split.length-1 === index){\n        checkerRow = firstLine.concat(ending)\n      } else if(index === 0){\n        checkerRow = firstLine\n        console.log('========================> first line');\n      } else if(split.length-1 === index) {\n        checkerRow = otherLines.concat(ending)\n        console.log('========================>lastRow');\n      } else {\n        checkerRow = otherLines\n        console.log('========================> this is a boring row');\n      }\n      let fLineOutput = tafRow.map((item, index) => {\n        console.log('========================>', checkerRow[index]);\n        if(checkerRow[index].test(item)){\n          return true\n        } else {\n          return false\n        }\n      })\n      output.push(fLineOutput)\n    }\n    console.log('========================>output', output);\n  }\n\n  //allows for a change to state while typing into an area\n  const handleChange = (event) => {\n    setInput(event.target.value)\n  }\n\n  //filter to get rid of items that are not needed\n  const cleaner = (array) => {\n    return array.filter(object => {\n        return (object !== '')\n    })\n}\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>TAF Checker</div>\n        <textarea className=\"TAFCheck\" rows=\"10\" cols=\"100\" onChange={(e) => {handleChange(e)}}></textarea>\n        <button onClick={(e)=>{checkTAF(e)}}>Check TAF</button>\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}