{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","React","useState","input","setInput","newLine","newBlock","TAF","AMD","COR","ICAO","DATE","BECMG","TEMPO","Time","Wind","Vis","Weather","Sky","Alt","Ice","Turb","TX","TN","splitTAF","splittingLines","split","splittingBlock","blockSplit","push","cleaner","checkingTAF","output","regexFirst","firstLine","fLine","slice","fLineOther","lineContentWx","BeginningLine","bBlock","match","block","concat","buildRegexFirstLine","line","index","parseInt","tafRow","checkerRow","fBlock","lineContent","oLineInit","other","otherLineRegex","Block","buildRegexOtherLine","fLineOutput","map","item","mapIndex","specialCase","lineNumber","length","hour1","hour2","date1","checkForSpecialCase","test","testFunc","check","parent","document","createElement","rowElement","garbo","classList","add","innerHTML","appendChild","createArea","element","getElementById","array","filter","object","className","rows","cols","onChange","e","target","value","onClick","checkTAF","id","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88601b20.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst App = (props) => {\n  const [input, setInput] = React.useState('');\n  // const [output, setOutput] = React.useState([])\n  const newLine = /\\n/;\n  const newBlock = /\\s/;\n  const TAF = /(TAF)/;\n  const AMD = /(AMD)/\n  const COR = /(COR)/\n  const ICAO = /[A-Z]{4}/;\n  const DATE = /[0-9]{6}[Z]/;\n  const BECMG = /(BECMG)/;\n  const TEMPO = /(TEMPO)/;\n  const Time = /[0-3][0-9][0-2][0-9][/][0-3][0-9][0-2][0-9]/;\n  const Wind = /([0-3][0-9][0]|(VRB))[0-9][0-9]((KT)|(G)[0-9][0-9](KT))/;\n  const Vis = /((9999)|(9000)|(8000)|(7000)|(6000)|(5000)|(4800)|(4700)|(4500)|(4400)|(4000)|(3700)|(3600)|(3400)|(3200)|(3000)|(2800)|(2600)|(2400)|(2200)|(2000)|(1800)|(1700)|(1600)|(1500)|(1400)|(1300)|(1200)|(1100)|(1000)|(0900)|(0800)|(0700)|(0600)|(0500)|(0400)|(0300)|(0200)|(0100)|(0000)|([-]0200))/;\n  const Weather = /((RA)|([-]RA)|([+]RA)|(SHRA)|([-]SHRA)|([+]SHRA)|(TS)|([-]TS)|([+]TS)|(TSRA)|([-]TSRA)|([+]TSRA)|(SN)|([-]SN)|([+]SN))/;\n  const Sky = /((SKC)|(((FEW)|(SCT)|(BKN)|(OVC))([0-9]{3}|[0-9]{3}(CB)))|((VV)[0-9]{3}))/;\n  const Alt = /(QNH)[0-9]{4}(INS)/;\n  const Ice = /(6)[0-9]{5}/;\n  const Turb = /((5)[0-9]{5})/;\n  const TX = /((((TX)[0-9]{2})|((TXM)[0-9]{2}))[/][0-3][0-9][0-2][0-9](Z))/;\n  const TN = /(((((TN)[0-9]{2})|((TNM)[0-9]{2}))[/][0-3][0-9][0-2][0-9](Z)))/;\n  const Error = '';\n\n\n  //onclick of check TAF causes this function to activate\n  const checkTAF = (e) => {\n    const split = splitTAF(input)\n    const check = checkingTAF(split)\n    const output = testFunc(split, check)\n    createArea(output)\n  }\n\n  //function to split pharagraph into parts\n  const splitTAF = (input) => {\n    const splittingLines = input.split(newLine)\n    const splittingBlock = []\n    for (let line of splittingLines){\n      const blockSplit = line.split(newBlock)\n      //fliter Function was added to get rid of empty stings\n      splittingBlock.push(cleaner(blockSplit))\n    }\n    return splittingBlock\n  }\n\n  //function for the first line of the TAF regex\n  const buildRegexFirstLine = (firstLine) => {\n    const fLine = firstLine[0].slice(1,2)\n    let fLineOther = firstLine[0].slice(6)\n    const lineContentWx = []\n    const BeginningLine = []\n    for (let bBlock of fLine){\n      if(bBlock.match(AMD)){\n        BeginningLine.push(TAF, AMD, ICAO, DATE, Time, Wind, Vis)\n        fLineOther = firstLine[0].slice(7)\n      } else if (bBlock.match(COR)){\n        BeginningLine.push(TAF, COR, ICAO, DATE, Time, Wind, Vis)\n        fLineOther = firstLine[0].slice(7)\n      } else {\n        BeginningLine.push(TAF, ICAO, DATE, Time, Wind, Vis)\n      }\n    }\n    for (let block of fLineOther){\n      if(block.match(Weather)){\n        lineContentWx.push(Weather)\n      } else if(block.match(Sky)){\n        lineContentWx.push(Sky)\n      } else if(block.match(Alt)){\n        lineContentWx.push(Alt)\n      } else if(block.match(Ice)){\n        lineContentWx.push(Ice)\n      } else if(block.match(Turb)){\n        lineContentWx.push(Turb)\n      } else if(block.match(TX)){\n        lineContentWx.push(TX)\n      } else if(block.match(TN)){\n        lineContentWx.push(TN)\n      } else {\n        lineContentWx.push(Error)\n      }\n    }\n    let Line = BeginningLine.concat(lineContentWx)\n    return Line\n  }\n\n  //building other Lines of the TAF regex\n  const buildRegexOtherLine = (line) => {\n    const fBlock = line.slice(0,1)\n    let lineContent = []\n    const oLineInit = []\n    for(let other of fBlock){\n      let otherLineRegex = line.slice(4)\n      if(other.match(BECMG)){\n        oLineInit.push(BECMG, Time, Wind, Vis)\n        for (let Block of otherLineRegex){\n          if(Block.match(Weather)){\n            lineContent.push(Weather)\n          } else if(Block.match(Sky)){\n            lineContent.push(Sky)\n          } else if(Block.match(Alt)){\n            lineContent.push(Alt)\n          } else if(Block.match(Ice)){\n            lineContent.push(Ice)\n          } else if(Block.match(Turb)){\n            lineContent.push(Turb)\n          } else if(Block.match(TX)) {\n            lineContent.push(TX)\n          } else if (Block.match(TN)){\n            lineContent.push(TN)\n          } else {\n            lineContent.push(Error)\n          }\n        }\n      } else {\n        oLineInit.push(TEMPO, Time)\n        otherLineRegex = line.slice(2)\n        for (let Block of otherLineRegex){\n          if(Block.match(Wind)){\n            lineContent.push(Wind)\n          } else if(Block.match(Vis)){\n            lineContent.push(Vis)\n          } else if(Block.match(Weather)){\n            lineContent.push(Weather)\n          } else if(Block.match(Sky)){\n            lineContent.push(Sky)\n          } else if(Block.match(Alt)){\n            lineContent.push(Alt)\n          } else if(Block.match(Ice)){\n            lineContent.push(Ice)\n          } else if(Block.match(Turb)){\n            lineContent.push(Turb)\n          } else if(Block.match(TX)) {\n            lineContent.push(TX)\n          } else if (Block.match(TN)){\n            lineContent.push(TN)\n          } else {\n            lineContent.push(Error)\n          }\n        }\n      }\n    }\n    let Data = oLineInit.concat(lineContent)\n    return Data\n  }\n\n  const checkForSpecialCase = (block, lineNumber) => {\n    if(block.match(Time) && block.length === 9 && lineNumber === 0){\n      const hour1 = parseInt(block.slice(2,4))\n      const hour2 = parseInt(block.slice(7))\n      const date1 = block.slice(0,2)\n      const date2 = block.slice(5,7)\n      if(date2 - date1 === 2){\n        if((24 - hour1)+hour2 + 24 === 30){\n          return true\n       } else {\n         return false\n       }\n      } else {\n        if((24 - hour1)+hour2 === 30){\n           return true\n        } else {\n          return false\n        }\n      }\n    // } else if(block.match(Sky)){\n    //   const layOut = block\n    //   console.log('========================>', layOut);\n    }\n    return true\n  }\n\n  //function that goes through the array and checks if anything is wrong or not there\n  const checkingTAF = (split) => {\n    let output = []\n    const regexFirst = buildRegexFirstLine(split)\n    for (let line in split){\n      let index = parseInt(line)\n      let tafRow = split[index]\n      let checkerRow = []\n      if(index === 0){ //First TAF Line\n        checkerRow = regexFirst\n      } else { //General Other TAF line\n        checkerRow = buildRegexOtherLine(tafRow)\n      }\n      let fLineOutput = tafRow.map((item, mapIndex) => {\n        const specialCase = checkForSpecialCase(item, index)\n        if(checkerRow[mapIndex] && checkerRow[mapIndex].test(item) && specialCase){\n          return true\n        } else {\n          return false\n        }\n      })\n      output.push(fLineOutput)\n    }\n    return output\n  }\n\n  //Function that sets up an area to be pushed to user\n  const testFunc = (split,check) => {\n    let parent = document.createElement('div')\n    for(let line in split){\n      let rowElement = ''\n      for(let block in split[line]){\n        if(check[line][block]){\n          rowElement = rowElement + \" \" + split[line][block]\n        } else {\n          rowElement = rowElement + \" \" + `<span style=\"background:red\">${split[line][block]}</span>`\n        }\n      }\n      let garbo = document.createElement('div')\n      if(line>0){\n        garbo.classList.add('indent')\n      }\n      garbo.innerHTML = rowElement\n      parent.appendChild(garbo)\n    }\n    return parent\n  }\n\n  //pushes the content to the user\n  const createArea = (output) => {\n    var element = document.getElementById('output');\n    element.innerHTML = ''\n    element.appendChild(output);\n  }\n\n  //allows for a change to state while typing into an area\n  const handleChange = (event) => {\n    setInput(event.target.value)\n  }\n\n  //filter to get rid of items that are not needed\n  const cleaner = (array) => {\n    return array.filter(object => {\n        return (object !== '')\n    })\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"Header\">TAF Checker</div>\n      <div className=\"Taf-Webpage\">\n        <div className=\"Taf-Input\">\n            <textarea className=\"TAF-Check\" rows=\"10\" cols=\"100\" onChange={(e) => {handleChange(e)}}></textarea>\n        </div>\n        <div className=\"taf-button\">\n            <button className=\"button\" onClick={(e)=>{checkTAF(e)}}>Check Taf</button>\n        </div>\n        <div id='p1' className=\"Taf-Output\">\n          <p>Info Area</p>\n          <div id={'output'} className=\"App-text\"/>\n        </div>\n      </div>\n      <div className={'footer'}>       \n        Copyright © By Shaun Lewis (2019 - 2020)\n      </div>\n    </div>\n  );\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}