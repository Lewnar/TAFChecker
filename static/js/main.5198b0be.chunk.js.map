{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","React","useState","input","setInput","newLine","newBlock","TAF","AMD","COR","ICAO","DATE","BECMG","TEMPO","Time","Wind","Vis","Weather","Sky","Alt","Ice","Turb","TX","TN","splitTAF","splittingLines","split","splittingBlock","blockSplit","push","cleaner","WeatherBECMGCheck","line","lineContent","block","wTest","sTest","iTest","tTest","aTest","match","checkingTAF","output","regexFirst","firstLine","lineContentWx","fLine","slice","fLineOther","BeginningLine","bBlock","console","log","concat","buildRegexFirstLine","index","parseInt","tafRow","checkerRow","fBlock","oLineInit","other","otherLineRegex","Block","Data","buildRegexOtherLine","fLineOutput","map","item","mapIndex","specialCase","lineNumber","skyBlock","length","hour1","hour2","date1","checkForSpecialCase","test","testFunc","check","parent","document","createElement","rowElement","garbo","classList","add","innerHTML","appendChild","createArea","element","getElementById","array","filter","object","className","rows","cols","onChange","e","target","value","onClick","checkTAF","id","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAuTeA,G,MAnTH,SAACC,GAAW,IAAD,EACKC,IAAMC,SAAS,IADpB,mBACdC,EADc,KACPC,EADO,KAEfC,EAAU,KACVC,EAAW,KACXC,EAAM,QACNC,EAAM,QACNC,EAAM,QACNC,EAAO,WACPC,EAAO,cACPC,EAAQ,UACRC,EAAQ,UACRC,EAAO,8CACPC,EAAO,0DACPC,EAAM,sSACNC,EAAU,sIACVC,EAAM,4EACNC,EAAM,qBACNC,EAAM,cACNC,EAAO,gBACPC,EAAK,+DACLC,EAAK,iEAeLC,EAAW,SAACrB,GAChB,IAAMsB,EAAiBtB,EAAMuB,MAAMrB,GAC7BsB,EAAiB,GAFG,uBAG1B,YAAiBF,EAAjB,+CAAgC,CAAC,IACzBG,EADwB,QACNF,MAAMpB,GAE9BqB,EAAeE,KAAKC,EAAQF,KANJ,kFAQ1B,OAAOD,GAsEHI,EAAoB,SAACC,GACzB,IAAMC,EAAc,GADc,uBAElC,IAAI,IAAJ,IAAiBD,EAAjB,+CAAsB,CAAC,IAAfE,EAAc,QAChBC,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EACRC,GAAQ,GACC,IAAVJ,EACGD,EAAMM,MAAMvB,GACdgB,EAAYJ,KAAKZ,GAEjBkB,GAAQ,GAEQ,IAAVC,EACLF,EAAMM,MAAMtB,GACbe,EAAYJ,KAAKX,IAEjBiB,GAAQ,EACRC,GAAQ,GAGVH,EAAYJ,KAlHJ,KAqHG,IAAVM,IAA6B,IAAVC,IACjBF,EAAMM,MAAMtB,GACbe,EAAYJ,KAAKX,GAEjBkB,GAAQ,IAIC,IAAVA,IAA6B,IAAVC,IACjBH,EAAMM,MAAMpB,GACba,EAAYJ,KAAKT,GAEjBiB,GAAQ,IAIC,IAAVA,IAA6B,IAAVC,IACjBJ,EAAMM,MAAMnB,GACbY,EAAYJ,KAAKR,GAEjBiB,GAAQ,IAIC,IAAVA,IAA6B,IAAVC,IACjBL,EAAMM,MAAMrB,GACbc,EAAYJ,KAAKV,IAEjBoB,GAAQ,EACRN,EAAYJ,KAlJN,OA4FsB,kFA4DlC,OAAOI,GA2CHQ,EAAc,SAACf,GACnB,IAAIgB,EAAS,GACPC,EA3KoB,SAACC,GAC3B,IAEIC,EAFEC,EAAQF,EAAU,GAAGG,MAAM,EAAE,GAC/BC,EAAaJ,EAAU,GAAGG,MAAM,GAE9BE,EAAgB,GAJmB,uBAKzC,YAAmBH,EAAnB,+CAAyB,CAAC,IAAjBI,EAAgB,QACpBA,EAAOV,MAAMhC,IACdyC,EAAcpB,KAAKtB,EAAKC,EAAKE,EAAMC,EAAMG,EAAMC,EAAMC,GACrDgC,EAAaJ,EAAU,GAAGG,MAAM,IACvBG,EAAOV,MAAM/B,IACtBwC,EAAcpB,KAAKtB,EAAKE,EAAKC,EAAMC,EAAMG,EAAMC,EAAMC,GACrDgC,EAAaJ,EAAU,GAAGG,MAAM,IAEhCE,EAAcpB,KAAKtB,EAAKG,EAAMC,EAAMG,EAAMC,EAAMC,IAbX,kFAmBzC,OAHA6B,EAAgBd,EAAkBiB,GAClCG,QAAQC,IAAI,4BAA6BP,GAC9BI,EAAcI,OAAOR,GAyJbS,CAAoB5B,GAFV,WAGpBM,GACP,IAAIuB,EAAQC,SAASxB,GACjByB,EAAS/B,EAAM6B,GACfG,EAAa,GACC,EAEhBA,EADW,IAAVH,EACYZ,EA3JS,SAACX,GAC3B,IAAM2B,EAAS3B,EAAKe,MAAM,EAAE,GACxBd,EAAc,GACZ2B,EAAY,GAHkB,uBAIpC,IAAI,IAAJ,IAAiBD,EAAjB,+CAAwB,CAAC,IAAjBE,EAAgB,QAClBC,EAAiB9B,EAAKe,MAAM,GAChC,GAAGc,EAAMrB,MAAM5B,GACbgD,EAAU/B,KAAKjB,EAAOE,EAAMC,EAAMC,GAClCiB,EAAcF,EAAkB+B,OAC3B,CACLF,EAAU/B,KAAKhB,EAAOC,GACtBgD,EAAiB9B,EAAKe,MAAM,GAFvB,2BAGL,YAAkBe,EAAlB,+CAAiC,CAAC,IAAzBC,EAAwB,QAC5BA,EAAMvB,MAAMzB,GACbkB,EAAYJ,KAAKd,GACTgD,EAAMvB,MAAMxB,GACpBiB,EAAYJ,KAAKb,GACT+C,EAAMvB,MAAMvB,GACpBgB,EAAYJ,KAAKZ,GACT8C,EAAMvB,MAAMtB,GACpBe,EAAYJ,KAAKX,GACT6C,EAAMvB,MAAMrB,GACpBc,EAAYJ,KAAKV,GACT4C,EAAMvB,MAAMpB,GACpBa,EAAYJ,KAAKT,GACT2C,EAAMvB,MAAMnB,GACpBY,EAAYJ,KAAKR,GACT0C,EAAMvB,MAAMlB,GACpBW,EAAYJ,KAAKP,GACRyC,EAAMvB,MAAMjB,GACrBU,EAAYJ,KAAKN,GAEjBU,EAAYJ,KAjFR,KA0DH,qFAT2B,kFAqCpC,IAAImC,EAAOJ,EAAUP,OAAOpB,GAE5B,OADAkB,QAAQC,IAAI,4BAA6BY,GAClCA,EAsHUC,CAAoBR,GAEnC,IAAIS,EAAcT,EAAOU,KAAI,SAACC,EAAMC,GAClC,IAAMC,EAtDgB,SAACpC,EAAOqC,EAAYC,GAE9C,GAAGtC,EAAMM,MAAM1B,IAA0B,IAAjBoB,EAAMuC,QAA+B,IAAfF,EAAiB,CAC7D,IAAMG,EAAQlB,SAAStB,EAAMa,MAAM,EAAE,IAC/B4B,EAAQnB,SAAStB,EAAMa,MAAM,IAC7B6B,EAAQ1C,EAAMa,MAAM,EAAE,GAE5B,OADcb,EAAMa,MAAM,EAAE,GACjB6B,IAAU,EACf,GAAKF,EAAOC,EAAQ,KAAO,GAM3B,GAAKD,EAAOC,IAAU,GAsB9B,OAAO,EAkBiBE,CAAoBT,EAAMb,GAC9C,SAAGG,EAAWW,IAAaX,EAAWW,GAAUS,KAAKV,IAASE,MAMhE5B,EAAOb,KAAKqC,IAlBd,IAAK,IAAIlC,KAAQN,EAAO,EAAfM,GAoBT,OAAOU,GAIHqC,EAAW,SAACrD,EAAMsD,GACtB,IAAIC,EAASC,SAASC,cAAc,OACpC,IAAI,IAAInD,KAAQN,EAAM,CACpB,IAAI0D,EAAa,GACjB,IAAI,IAAIlD,KAASR,EAAMM,GAEnBoD,EADCJ,EAAMhD,GAAME,GACAkD,EAAa,IAAM1D,EAAMM,GAAME,GAE/BkD,EAAa,IAAb,uCAAmD1D,EAAMM,GAAME,GAA/D,WAGjB,IAAImD,EAAQH,SAASC,cAAc,OAChCnD,EAAK,GACNqD,EAAMC,UAAUC,IAAI,UAEtBF,EAAMG,UAAYJ,EAClBH,EAAOQ,YAAYJ,GAErB,OAAOJ,GAIHS,EAAa,SAAChD,GAClB,IAAIiD,EAAUT,SAASU,eAAe,UACtCD,EAAQH,UAAY,GACpBG,EAAQF,YAAY/C,IAShBZ,EAAU,SAAC+D,GACf,OAAOA,EAAMC,QAAO,SAAAC,GAChB,MAAmB,KAAXA,MAKd,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UAAf,eACA,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACX,8BAAUA,UAAU,YAAYC,KAAK,KAAKC,KAAK,MAAMC,SAAU,SAACC,GAhBxEhG,EAgB4FgG,EAhB7EC,OAAOC,WAkBlB,yBAAKN,UAAU,cACX,4BAAQA,UAAU,SAASO,QAAS,SAACH,IAzQ9B,SAACA,GAChB,IAAM1E,EAAQF,EAASrB,GACjB6E,EAAQvC,EAAYf,GACpBgB,EAASqC,EAASrD,EAAOsD,GAC/BU,EAAWhD,GAqQuC8D,KAA1C,cAEJ,yBAAKC,GAAG,KAAKT,UAAU,cACrB,wCACA,yBAAKS,GAAI,SAAUT,UAAU,eAGjC,yBAAKA,UAAW,UAAhB,kDCnScU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrE,MACvB,2DCZNsE,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASU,eAAe,SD2H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5198b0be.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst App = (props) => {\n  const [input, setInput] = React.useState('');\n  const newLine = /\\n/;\n  const newBlock = /\\s/;\n  const TAF = /(TAF)/;\n  const AMD = /(AMD)/\n  const COR = /(COR)/\n  const ICAO = /[A-Z]{4}/;\n  const DATE = /[0-9]{6}[Z]/;\n  const BECMG = /(BECMG)/;\n  const TEMPO = /(TEMPO)/;\n  const Time = /[0-3][0-9][0-2][0-9][/][0-3][0-9][0-2][0-9]/;\n  const Wind = /([0-3][0-9][0]|(VRB))[0-9][0-9]((KT)|(G)[0-9][0-9](KT))/;\n  const Vis = /((9999)|(9000)|(8000)|(7000)|(6000)|(5000)|(4800)|(4700)|(4500)|(4400)|(4000)|(3700)|(3600)|(3400)|(3200)|(3000)|(2800)|(2600)|(2400)|(2200)|(2000)|(1800)|(1700)|(1600)|(1500)|(1400)|(1300)|(1200)|(1100)|(1000)|(0900)|(0800)|(0700)|(0600)|(0500)|(0400)|(0300)|(0200)|(0100)|(0000)|([-]0200))/;\n  const Weather = /((NSW)|(RA)|([-]RA)|([+]RA)|(SHRA)|([-]SHRA)|([+]SHRA)|(VCSH)|(TS)|([-]TS)|([+]TS)|(TSRA)|([-]TSRA)|([+]TSRA)|(SN)|([-]SN)|([+]SN))/;\n  const Sky = /((SKC)|(((FEW)|(SCT)|(BKN)|(OVC))([0-9]{3}|[0-9]{3}(CB)))|((VV)[0-9]{3}))/;\n  const Alt = /(QNH)[0-9]{4}(INS)/;\n  const Ice = /(6)[0-9]{5}/;\n  const Turb = /((5)[0-9]{5})/;\n  const TX = /((((TX)[0-9]{2})|((TXM)[0-9]{2}))[/][0-3][0-9][0-2][0-9](Z))/;\n  const TN = /(((((TN)[0-9]{2})|((TNM)[0-9]{2}))[/][0-3][0-9][0-2][0-9](Z)))/;\n  const Error = '';\n  let skyBlockPerLine = 0\n\n\n\n  //onclick of check TAF causes this function to activate\n  const checkTAF = (e) => {\n    const split = splitTAF(input)\n    const check = checkingTAF(split)\n    const output = testFunc(split, check)\n    createArea(output)\n  }\n\n  //function to split pharagraph into parts\n  const splitTAF = (input) => {\n    const splittingLines = input.split(newLine)\n    const splittingBlock = []\n    for (let line of splittingLines){\n      const blockSplit = line.split(newBlock)\n      //fliter Function was added to get rid of empty stings\n      splittingBlock.push(cleaner(blockSplit))\n    }\n    return splittingBlock\n  }\n\n  //function for the first line of the TAF regex\n  const buildRegexFirstLine = (firstLine) => {\n    const fLine = firstLine[0].slice(1,2)\n    let fLineOther = firstLine[0].slice(6)\n    let lineContentWx = []\n    const BeginningLine = []\n    for (let bBlock of fLine){\n      if(bBlock.match(AMD)){\n        BeginningLine.push(TAF, AMD, ICAO, DATE, Time, Wind, Vis)\n        fLineOther = firstLine[0].slice(7)\n      } else if (bBlock.match(COR)){\n        BeginningLine.push(TAF, COR, ICAO, DATE, Time, Wind, Vis)\n        fLineOther = firstLine[0].slice(7)\n      } else {\n        BeginningLine.push(TAF, ICAO, DATE, Time, Wind, Vis)\n      }\n    }\n    lineContentWx = WeatherBECMGCheck(fLineOther)\n    console.log('========================>', lineContentWx);\n    let Line = BeginningLine.concat(lineContentWx)\n    return Line\n  }\n\n  //building other Lines of the TAF regex\n  const buildRegexOtherLine = (line) => {\n    const fBlock = line.slice(0,1)\n    let lineContent = []\n    const oLineInit = []\n    for(let other of fBlock){\n      let otherLineRegex = line.slice(4)\n      if(other.match(BECMG)){\n        oLineInit.push(BECMG, Time, Wind, Vis)\n        lineContent = WeatherBECMGCheck(otherLineRegex)\n      } else {\n        oLineInit.push(TEMPO, Time)\n        otherLineRegex = line.slice(2)\n        for (let Block of otherLineRegex){\n          if(Block.match(Wind)){\n            lineContent.push(Wind)\n          } else if(Block.match(Vis)){\n            lineContent.push(Vis)\n          } else if(Block.match(Weather)){\n            lineContent.push(Weather)\n          } else if(Block.match(Sky)){\n            lineContent.push(Sky)\n          } else if(Block.match(Alt)){\n            lineContent.push(Alt)\n          } else if(Block.match(Ice)){\n            lineContent.push(Ice)\n          } else if(Block.match(Turb)){\n            lineContent.push(Turb)\n          } else if(Block.match(TX)) {\n            lineContent.push(TX)\n          } else if (Block.match(TN)){\n            lineContent.push(TN)\n          } else {\n            lineContent.push(Error)\n          }\n        }\n      }\n    }\n    let Data = oLineInit.concat(lineContent)\n    console.log('========================>', Data);\n    return Data\n  }\n\n  //to make sure that the line stays in order.\n  const WeatherBECMGCheck = (line) => {\n    const lineContent = []\n    for(let block of line){\n      let wTest = true\n      let sTest = true\n      let iTest = true\n      let tTest = true\n      let aTest = true\n      if(wTest === true){\n        if (block.match(Weather)){\n          lineContent.push(Weather)\n        } else {\n          wTest = false\n        }\n      } else if(sTest === true){\n        if(block.match(Sky)){\n          lineContent.push(Sky)\n        } else {\n          wTest = false\n          sTest = false\n        }\n      } else {\n        lineContent.push(Error)\n      }\n\n      if(wTest === false && sTest === true){\n        if(block.match(Sky)){\n          lineContent.push(Sky)\n        } else {\n          sTest = false\n        }\n      }\n\n      if(sTest === false && iTest === true){\n        if(block.match(Ice)){\n          lineContent.push(Ice)\n        } else {\n          iTest = false\n        }\n      }\n\n      if(iTest === false && tTest === true){\n        if(block.match(Turb)){\n          lineContent.push(Turb)\n        } else {\n          tTest = false\n        }\n      }\n\n      if(tTest === false && aTest === true){\n        if(block.match(Alt)){\n          lineContent.push(Alt)\n        } else {\n          aTest = false\n          lineContent.push(Error)\n        }\n      }\n\n      \n    }\n    return lineContent\n  }\n\n  const checkForSpecialCase = (block, lineNumber, skyBlock) => {\n    \n    if(block.match(Time) && block.length === 9 && lineNumber === 0){\n      const hour1 = parseInt(block.slice(2,4))\n      const hour2 = parseInt(block.slice(7))\n      const date1 = block.slice(0,2)\n      const date2 = block.slice(5,7)\n      if(date2 - date1 === 2){\n        if((24 - hour1)+hour2 + 24 === 30){\n          return true\n       } else {\n         return false\n       }\n      } else {\n        if((24 - hour1)+hour2 === 30){\n           return true\n        } else {\n          return false\n        }\n      }\n    } \n    // if(block.match(Sky)){\n    //   skyBlockPerLine++\n    //   const layOut = block\n    //   // console.log('========================>', layOut , lineNumber);\n    //   console.log('========================>', skyBlockPerLine);\n    //   if(block.match(skySKC) && skyBlockPerLine === 1){\n    //     return true\n    //   } else if(block.match(skyVV) && skyBlockPerLine === 1){\n    //     return true\n    //   } else if(skyBlockPerLine > 1){\n    //     console.log('========================>Function Time');\n    //   } else {\n    //     return true\n    //   }\n    // }\n    return true\n  }\n\n  //function that goes through the array and checks if anything is wrong or not there\n  const checkingTAF = (split) => {\n    let output = []\n    const regexFirst = buildRegexFirstLine(split)\n    for (let line in split){\n      let index = parseInt(line)\n      let tafRow = split[index]\n      let checkerRow = []\n      skyBlockPerLine = 0\n      if(index === 0){ //First TAF Line\n        checkerRow = regexFirst\n      } else { //General Other TAF line\n        checkerRow = buildRegexOtherLine(tafRow)\n      }\n      let fLineOutput = tafRow.map((item, mapIndex) => {\n        const specialCase = checkForSpecialCase(item, index, skyBlockPerLine)\n        if(checkerRow[mapIndex] && checkerRow[mapIndex].test(item) && specialCase){\n          return true\n        } else {\n          return false\n        }\n      })\n      output.push(fLineOutput)\n    }\n    return output\n  }\n\n  //Function that sets up an area to be pushed to user\n  const testFunc = (split,check) => {\n    let parent = document.createElement('div')\n    for(let line in split){\n      let rowElement = ''\n      for(let block in split[line]){\n        if(check[line][block]){\n          rowElement = rowElement + \" \" + split[line][block]\n        } else {\n          rowElement = rowElement + \" \" + `<span style=\"background:red\">${split[line][block]}</span>`\n        }\n      }\n      let garbo = document.createElement('div')\n      if(line>0){\n        garbo.classList.add('indent')\n      }\n      garbo.innerHTML = rowElement\n      parent.appendChild(garbo)\n    }\n    return parent\n  }\n\n  //pushes the content to the user\n  const createArea = (output) => {\n    var element = document.getElementById('output');\n    element.innerHTML = ''\n    element.appendChild(output);\n  }\n\n  //allows for a change to state while typing into an area\n  const handleChange = (event) => {\n    setInput(event.target.value)\n  }\n\n  //filter to get rid of items that are not needed\n  const cleaner = (array) => {\n    return array.filter(object => {\n        return (object !== '')\n    })\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"Header\">TAF Checker</div>\n      <div className=\"Taf-Webpage\">\n        <div className=\"Taf-Input\">\n            <textarea className=\"TAF-Check\" rows=\"10\" cols=\"100\" onChange={(e) => {handleChange(e)}}></textarea>\n        </div>\n        <div className=\"taf-button\">\n            <button className=\"button\" onClick={(e)=>{checkTAF(e)}}>Check Taf</button>\n        </div>\n        <div id='p1' className=\"Taf-Output\">\n          <p>Info Area</p>\n          <div id={'output'} className=\"App-text\"/>\n        </div>\n      </div>\n      <div className={'footer'}>       \n        Copyright © By Shaun Lewis (2019 - 2020)\n      </div>\n    </div>\n  );\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}